<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Answer1Required.Text" xml:space="preserve">
    <value>You must supply the first answer to the user</value>
  </data>
  <data name="Answer2Required.Text" xml:space="preserve">
    <value>You must supply the second answer for the user</value>
  </data>
  <data name="AnswersExist.Text" xml:space="preserve">
    <value>Users have already answered this question, the only action available is to select the valid answer.</value>
  </data>
  <data name="lblAnswer1.Help" xml:space="preserve">
    <value>The first answer shown to the user</value>
  </data>
  <data name="lblAnswer1.Text" xml:space="preserve">
    <value>Answer 1</value>
  </data>
  <data name="lblAnswer2.Help" xml:space="preserve">
    <value>The second answer shown to the user</value>
  </data>
  <data name="lblAnswer2.Text" xml:space="preserve">
    <value>Answer 2</value>
  </data>
  <data name="lblAnswer3.Help" xml:space="preserve">
    <value>The third answer shown to the user</value>
  </data>
  <data name="lblAnswer3.Text" xml:space="preserve">
    <value>Answer 3</value>
  </data>
  <data name="lblAnswer3Required.Text" xml:space="preserve">
    <value>Since question 4 and/or 5 has been ansered, you must put text in for question 3</value>
  </data>
  <data name="lblAnswer4.Help" xml:space="preserve">
    <value>The fourth answer shown to the user</value>
  </data>
  <data name="lblAnswer4.Text" xml:space="preserve">
    <value>Answer 4</value>
  </data>
  <data name="lblAnswer4Required.Text" xml:space="preserve">
    <value>Since question 5 has been answered, you must put text in for question 4</value>
  </data>
  <data name="lblAnswer5.Help" xml:space="preserve">
    <value>The fifth answer shown to the user</value>
  </data>
  <data name="lblAnswer5.Text" xml:space="preserve">
    <value>Answer 5</value>
  </data>
  <data name="lblCorrectAnswer.Help" xml:space="preserve">
    <value>Which answer was correct</value>
  </data>
  <data name="lblCorrectAnswer.Text" xml:space="preserve">
    <value>Correct Answer</value>
  </data>
  <data name="lblInvalidAnswer.Text" xml:space="preserve">
    <value>You must select a question that has an answer as the "Correct Answer"</value>
  </data>
  <data name="lblPromptText.Help" xml:space="preserve">
    <value>The question to ask the users</value>
  </data>
  <data name="lblPromptText.Text" xml:space="preserve">
    <value>Question</value>
  </data>
  <data name="PointsFormat.Text" xml:space="preserve">
    <value>The points must be provided as a whole number</value>
  </data>
  <data name="PointsRequired.Text" xml:space="preserve">
    <value>You must supply the point value for the question</value>
  </data>
  <data name="PromptTextRequired.Text" xml:space="preserve">
    <value>You must specify the prompt text</value>
  </data>
  <data name="QuizScored.Text" xml:space="preserve">
    <value>The associated quiz has already been scored, it is no longer possible to modify any question information</value>
  </data>
</root>