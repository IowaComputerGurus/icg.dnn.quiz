<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ControlTitle_edit.Text" xml:space="preserve">
    <value>Add/Edit Quiz!</value>
  </data>
  <data name="btnCancel.Text" xml:space="preserve">
    <value>Return to Module</value>
  </data>
  <data name="btnSave.Text" xml:space="preserve">
    <value>Save General Settings</value>
  </data>
  <data name="InvalidIdPassed.Text" xml:space="preserve">
    <value>An invalid quiz id was passed, please re-try your operation</value>
  </data>
  <data name="lblGeneralSettings.Text" xml:space="preserve">
    <value>&lt;h3 class="dnnFormSectionHead"&gt;Quiz Options&lt;/h3&gt;</value>
  </data>
  <data name="NoParamPassed.Text" xml:space="preserve">
    <value>You must access this page via a link from the modules display</value>
  </data>
  <data name="lblQuestions.Text" xml:space="preserve">
    <value>&lt;h3 class=dnnFormSectionHead"&gt;Quiz Questions&lt;/h3&gt;</value>
  </data>
  <data name="lblIsPublished.Help" xml:space="preserve">
    <value>This option must be selected for individuals to view the challenge</value>
  </data>
  <data name="lblIsPublished.Text" xml:space="preserve">
    <value>Published?</value>
  </data>
  <data name="lblViewRole.Help" xml:space="preserve">
    <value>The role that a user must be in to be able to take the quiz</value>
  </data>
  <data name="lblViewRole.Text" xml:space="preserve">
    <value>User Role</value>
  </data>
  <data name="lblPassPercentage.Help" xml:space="preserve">
    <value>The percentage needed to pass</value>
  </data>
  <data name="lblPassPercentage.Text" xml:space="preserve">
    <value>Pass Percentage</value>
  </data>
  <data name="lblQuizTitle.Help" xml:space="preserve">
    <value>The title of the quiz</value>
  </data>
  <data name="lblQuizTitle.Text" xml:space="preserve">
    <value>Quiz Title</value>
  </data>
  <data name="QuizTitleRequired.Text" xml:space="preserve">
    <value>You must supply the title</value>
  </data>
  <data name="lblExpires.Help" xml:space="preserve">
    <value>If selected you can specify an expiration time</value>
  </data>
  <data name="lblExpires.Text" xml:space="preserve">
    <value>Testing Can Expire</value>
  </data>
  <data name="lblExpireTime.Help" xml:space="preserve">
    <value>The total number of days before the assessment expires.</value>
  </data>
  <data name="lblExpireTime.Text" xml:space="preserve">
    <value>Expire Time (Days)</value>
  </data>
  <data name="SaveSuccessful.Text" xml:space="preserve">
    <value>Quiz Information Saved Successfully!</value>
  </data>
  <data name="NumberField.Text" xml:space="preserve">
    <value>Must be a whole number</value>
  </data>
  <data name="RequiredField.Text" xml:space="preserve">
    <value>Required</value>
  </data>
  <data name="lblAddRoleOnPass.Help" xml:space="preserve">
    <value>If a value other than "Do Not Add Role" is selected will add user to role on success.</value>
  </data>
  <data name="lblAddRoleOnPass.Text" xml:space="preserve">
    <value>Add Role On Pass</value>
  </data>
  <data name="lblAllowRetake.Help" xml:space="preserve">
    <value>If selected allows users to retake the quiz if they failed</value>
  </data>
  <data name="lblAllowRetake.Text" xml:space="preserve">
    <value>Allow Users to Retake?</value>
  </data>
  <data name="CanNotEdit.Text" xml:space="preserve">
    <value>&lt;div class="dnnFormMessage dnnFormWarning"&gt;Users have taken this quiz already. Edits are no longer allowed other than to enable/disable the quiz.  You may control this via the Settings for this module instance.&lt;/div&gt;</value>
  </data>
  <data name="lblCertificateTemplate.Help" xml:space="preserve">
    <value>Optional template for a downloadable certificate for the test</value>
  </data>
  <data name="lblCertificateTemplate.Text" xml:space="preserve">
    <value>Certificate Template</value>
  </data>
  <data name="lblEmailResultsMode.Help" xml:space="preserve">
    <value>A configuration setting regarding the sending of an email upon completion</value>
  </data>
  <data name="lblEmailResultsMode.Text" xml:space="preserve">
    <value>Email Results</value>
  </data>
  <data name="lblExistingCertificateTemplate.Text" xml:space="preserve">
    <value>Existing Template</value>
  </data>
</root>